library(tidyr)
library(stringr)
df %>% separate(x, c('Name', 'Surname'))
?seperate
?separate
View(df)
df <- data.frame(x = c('WW_V8_R1', 'WW_V7_R2', 'WWH_V4_R2'))
df <- data.frame(sample = c('WW_V8_R1', 'WW_V7_R2', 'WWH_V4_R2'))
df %>% separate(sample, c("stress", "temps", "rep"), sep = "_")
df <- data.frame(x = c('WW_V8_R1', 'WW_V7_R2', 'WWH_V4_R2'), Y = c(1,2,3))
df %>% separate(sample, c("stress", "temps", "rep"), sep = "_")
df %>% separate(x, c("stress", "temps", "rep"), sep = "_")
df$Z<- rownames(df)
df
df %>% tidyr::gather("freq", "col", 2:3)
df <- data.frame(sample = c('WW_V8_R1', 'WW_V7_R2', 'WWH_V4_R2'), variant1 = c(0.1,0.5,0.8), variant2 = v(0.9,0.5,0.2))
df <- data.frame(sample = c('WW_V8_R1', 'WW_V7_R2', 'WWH_V4_R2'), variant1 = c(0.1,0.5,0.8), variant2 = c(0.9,0.5,0.2))
df
df %>% tidyr::gather("freq", 2:3)
df %>% tidyr::gather("freq", "blabl", 2:3)
df %>% tidyr::gather("variantName", "frequence", 2:3)
dfB <- df
colnames(dfB) <- paste0("prefix",dfB[1,])
dfB
dfB$newCol <- rownames(dfB)
dfB
str(dfb)
str(dfR)
str(dfB)
?gather
load("~/Documents/KPH/ShinyApp/data/inputApp5.RData")
rownames(tpmFinal)
head(tpmFinal)
max(tmpFinal[1,])
max(tpmFinal[1,])
filtre <- c()
rownames(tpmFinal)
[5]
rownames(tpmFinal)[5]
for(i in 1:nrow(tpmFinal)){
if (max(tpmFinal[i,]) >1){
append(filtre,rownames(tpmFinal)[i])
}
}
filtre
max(tpmFinal[10,]
)
1:nrow(tpmFinal)
?append
filtre <- c()
filtre
for(i in 1:nrow(tpmFinal)){
if (max(tpmFinal[i,]) > 1){
append(filtre,rownames(tpmFinal)[i])
}
}
test <- apply(tpmFinal,1, max)
aptest
test
tpmFinal["VIT_00s0477g00060",]
which(test > 1)
length(which(test > 1))
which(test == "VIT_18s0089g01300")
test["VIT_18s0089g01300"]
which(test eq "VIT_18s0089g01300")
which(names(test) == "VIT_18s0089g01300")
load("~/Documents/KPH/isabelle/vvk52/prediction_sequences_5.2/workSpace_SGS_prediction.vvk5.2.RData")
library(BSgenome.Vvinifera.URGI.IGGP12Xv0)
####test pour 5.2 recuperer sequence à partir des positions######
library(Biostrings)
#apour obtenir la version predite de novo
pred.5.2 <-as.data.frame(rowRanges(sgfc_pred))
exon5.2 <- pred.5.2[which(pred.5.2$type == "E"),]
my.exon1 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29207298, 29207562))
my.exon2 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29208030, 29208325))
my.exon3 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29209884, 29209964))
my.exon4 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29210067, 29210165))
####test pour 5.2 recuperer sequence à partir des positions######
library(Biostrings)
#apour obtenir la version predite de novo
pred.5.2 <-as.data.frame(rowRanges(sgfc_pred))
exon5.2 <- pred.5.2[which(pred.5.2$type == "E"),]
my.exon1 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29207298, 29207562))
exon5.2
?getSeq
exon<- as.character(Biostrings::getSeq(Vvinifera, "chr18", exon5.2[i,"start"], exon5.2[i,"end"]))
my.exon1 <- as.character(Biostrings::getSeq(Vvinifera, "Chr18", 29207298, 29207562))
Vvinifera
my.exon1 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29207298, 29207562))
my.exon2 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29208030, 29208325))
my.exon3 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29209884, 29209964))
my.exon4 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29210067, 29210165))
my.exon5 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29225303, 29225524))
my.exon6 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29225983, 29226171))
my.exon7 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29227229, 29227304))
my.exon8 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29227383, 29227677))
my.exon9 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29237397, 29237507))
pastedExon_SGS<-""
for (i in 1:nrow(exon5.2)){
exon<- as.character(Biostrings::getSeq(Vvinifera, "chr18", exon5.2[i,"start"], exon5.2[i,"end"]))
pastedExon_SGS <- paste0(pastedExon_SGS,exon)
}
pastedExon_SGS
my.exon1
my.exon2
exon5.2
my.exon3
my.exon4
df <- plotFeatures(sgfc_pred, geneID = 1, color_novel = "red", heightPanels = c(1,2)) #tx_view =TRUE
#pour obtenir la version annotées par le gff ?
ucsc_5.2 <- as.data.frame(rowRanges(sgfc_ucsc))
ucsc_exon5.2 <- ucsc_5.2[which(ucsc_5.2$type == "E"),]
ucsc_exon5.2
sequenceTotale <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29203043, 29230849))
sequenceTotale
#pour obtenir la version annotées par le gff ?
ucsc_5.2 <- as.data.frame(rowRanges(sgfc_ucsc))
ucsc_exon5.2 <- ucsc_5.2[which(ucsc_5.2$type == "E"),]
pastedExon_ucsc<-""
for (i in 1:nrow(ucsc_exon5.2)){
exon<- as.character(Biostrings::getSeq(Vvinifera, "chr18", ucsc_exon5.2[i,"start"], ucsc_exon5.2[i,"end"]))
pastedExon_ucsc <- paste0(pastedExon_ucsc,exon)
}
pastedExon_ucsc
29237507 -29207298
nchar
nchar(pastedExon_ucsc)
nchar(sequenceTotale)
ucsc_exon5.2
my.exon5
my.exon6
my.exon7
my.exon8
my.exon9
#pour obtenir la version annotées par le gff ?
ucsc_5.2 <- as.data.frame(rowRanges(sgfc_ucsc))
ucsc_exon5.2 <- ucsc_5.2[which(ucsc_5.2$type == "E"),]
pastedExon_ucsc<-""
for (i in 1:nrow(ucsc_exon5.2)){
exon<- as.character(Biostrings::getSeq(Vvinifera, "chr18", ucsc_exon5.2[i,"start"], ucsc_exon5.2[i,"end"]))
pastedExon_ucsc <- paste0(pastedExon_ucsc,exon)
}
pastedExon_ucsc
ucsc_exon5.2
ucsc_exon5.2$start
ucsc_exon5.2$end
exon5.2$start
exon5.2$end
my.exon1_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29203043, 29203213))
my.exon2_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29204579, 29204800))
my.exon3_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29205042, 29205445))
my.exon4_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29208030, 29208325))
my.exon5_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29209884, 29209964))
my.exon6_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29210067, 29210165))
my.exon7_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29225303, 29225524))
my.exon8_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29225983, 29226171))
my.exon9_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29227229, 29227677))
my.exon10_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29230783, 29230849))
df <- plotFeatures(sgfc_pred, geneID = 1, color_novel = "red", heightPanels = c(1,2)) #tx_view =TRUE
df <- plotFeatures(sgfc_ucsc, geneID = 1)
my.exon1_gff
my.exon2_gff
my.exon3_gff
my.exon4_gff
my.exon5_gff
my.exon6_gff
my.exon7_gff
my.exon8_gff
my.exon9_gff
my.exon10_gff
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29200043, 29209964))
sequenceTotale2
sequenceTotale
sequenceTotale3 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29202043, 29208325))
sequenceTotale3
29208325 -29202043
nchar(my.exon1)
nchar(my.exon2)
nchar(my.exon3)
265+296+81
nchar(pastedExon_SGS)
nchar(pastedExon_SGS)/3
exon1_2 <- paste0(my.exon1, my.exon2)
exon1_2
load("~/Documents/KPH/isabelle/vvk52/prediction_sequences_5.2/workSpace_SGS_prediction.vvk5.2.RData")
####test pour 5.2 recuperer sequence à partir des positions######
library(Biostrings)
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29201543, 29207562))
library(BSgenome.Vvinifera.URGI.IGGP12Xv0)
seqlevelsStyle(Vvinifera) <- "NCBI"
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29201543, 29207562))
library(BSgenome.Vvinifera.URGI.IGGP12Xv0)
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29201543, 29207562))
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29201543, 29207562))
sequenceTotale2
pastedExon_SGS<-""
for (i in 1:nrow(exon5.2)){
exon<- as.character(Biostrings::getSeq(Vvinifera, "18", exon5.2[i,"start"], exon5.2[i,"end"]))
pastedExon_SGS <- paste0(pastedExon_SGS,exon)
}
#apour obtenir la version predite de novo
pred.5.2 <-as.data.frame(rowRanges(sgfc_pred))
exon5.2 <- pred.5.2[which(pred.5.2$type == "E"),]
#pour obtenir la version annotées par le gff ?
ucsc_5.2 <- as.data.frame(rowRanges(sgfc_ucsc))
ucsc_exon5.2 <- ucsc_5.2[which(ucsc_5.2$type == "E"),]
my.exon1_gff <- as.character(Biostrings::getSeq(Vvinifera, "chr18", 29203043, 29203213))
pastedExon_ucsc<-""
for (i in 1:nrow(ucsc_exon5.2)){
exon<- as.character(Biostrings::getSeq(Vvinifera, "18", ucsc_exon5.2[i,"start"], ucsc_exon5.2[i,"end"]))
pastedExon_ucsc <- paste0(pastedExon_ucsc,exon)
}
pastedExon_ucsc
sequenceTotale2 <- as.character(Biostrings::getSeq(Vvinifera, "18", 29201543, 29207562))
sequenceTotale2
load("~/Documents/KPH/ShinyApp/data/inputApp5.RData")
View(codesBooks)
nrow(codebook)
nrow(codeBooks)
nrow(codesBooks)
ncol(codesBooks)
colnames(codesBooks)
load("~/Documents/KPH/test_tools/SGSseq/multiSGSV2/outputSGSseq/SGSeqOutputV2_4001TO4500.Rdata")
which(BoucleTest[[2]] == "VIT_13s0067g00630_1")
head(BoucleTest[[2]])
head(BoucleTest[[3]])
which(BoucleTest[[3]] == "VIT_13s0067g00630_1")
rm(BoucleTest)
load("~/Documents/KPH/test_tools/SGSseq/multiSGSV2/outputSGSseq/SGSeqOutputV2_3501TO4000.Rdata")
which(BoucleTest[[3]] == "VIT_13s0067g00630_1")
BoucleTest[[1]][c(83,84),]
library(GenomicFeatures)
counts_to_tpm <- function(counts, featureLength, meanFragmentLength) {
# Ensure valid arguments.
stopifnot(length(featureLength) == nrow(counts))
stopifnot(length(meanFragmentLength) == ncol(counts))
# Compute effective lengths of features in each library.
effLen <- do.call(cbind, lapply(1:ncol(counts), function(i) {
featureLength - meanFragmentLength[i] + 1
}))
# Exclude genes with length less than the mean fragment length.
idx <- apply(effLen, 1, function(x) min(x) > 1)
counts <- counts[idx,]
effLen <- effLen[idx,]
featureLength <- featureLength[idx]
# Process one column at a time.
tpm <- do.call(cbind, lapply(1:ncol(counts), function(i) {
rate = log(counts[,i]) - log(effLen[,i])
denom = log(sum(exp(rate)))
exp(rate - denom + log(1e6))
}))
# Copy the row and column names from the original matrix.
colnames(tpm) <- colnames(counts)
rownames(tpm) <- rownames(counts)
return(tpm)
}
###chargemenet meanLengthFragment
MLD<-read.table("/home/bpmp/Documents/KPH/rnaSeq/TPM_norm/picard_fragmentLength/run02/MLF.tab")
###chargemenet meanLengthFragment
MLD<-read.table("/home/maillard/Documents/KPH/rnaSeq/TPM_norm/picard_fragmentLength/run02/MLF.tab")
### calcul exonic size max
txdb <- makeTxDbFromGFF("/home/bpmp/Documents/KPH/rnaSeq/data/mapping_counting/Ensembl/annotation/Vitis_vinifera.12X.49.gtf", format ="gtf")
### calcul exonic size max
txdb <- makeTxDbFromGFF("/home/maillard/Documents/KPH/rnaSeq/data/mapping_counting/Ensembl/annotation/Vitis_vinifera.12X.49.gtf", format ="gtf")
exons.list.per.gene <- exonsBy(txdb,by="gene")
exonic.gene.sizes <- as.data.frame(sum(width(reduce(exons.list.per.gene))))
colnames(exonic.gene.sizes) <-"exonicSize"
#formatage du fichier de comptage
myData <- read.csv2("/home/maillard/Documents/KPH/rnaSeq/deseq/data/TotalReadsPerGeneR2R3.txt", sep = " ", row.names=1)
#myDataBis <- myData[which(rowSums(myData) > 0),]
myDataF <- merge(x = myData, y = exonic.gene.sizes , by = 0) #permet d'order les deux vecteurs de façon similaire
rownames(myDataF) <- myDataF$Row.names
myDataF <- myDataF[,-1]
all(rownames(myDataF) == rownames(exonic.gene.sizes)) #check for order --> OK
Verif <- data.frame(colnames(myDataF)[1:89],MLD$V1) #colnames(same order) --> O K
Verif
myDataFinal <- myDataF[,1:89] # remove exonic size column form this data.frame
FeatureLength <- as.vector(myDataF$exonicSize)#
meanFragmentLength <- as.vector(MLD$V2)
tpmFinal<-counts_to_tpm(myDataFinal,FeatureLength,meanFragmentLength)
head(colnames(tpmVerif))
head(colnames(tpmFinal))
head(rownames(tpmFinal))
View(exonic.gene.sizes)
View(tpmFinal)
head(FeatureLength)
head(FeatureLength,50)
myDataF
View(myDataF)
MLD
myDataFinal["gene:VIT_01s0011g00060",]
tpmFinal["gene:VIT_01s0011g00060",]
head(rownames(tpmFinal))
myDataF["gene:VIT_01s0011g00060"]
myDataF["gene:VIT_01s0011g00060",]
FeatureLength
effLen <- do.call(cbind, lapply(1:ncol(myDataFinal), function(i) {
FeatureLength - meanFragmentLength[i] + 1
}))
effLength
effLeng
effLen
View(effLen)
length(which(effLen[,1] < 0))
counts_to_tpm_sansFiltre <- function(counts, featureLength, meanFragmentLength) {
# Ensure valid arguments.
stopifnot(length(featureLength) == nrow(counts))
stopifnot(length(meanFragmentLength) == ncol(counts))
# Compute effective lengths of features in each library.
effLen <- do.call(cbind, lapply(1:ncol(counts), function(i) {
featureLength - meanFragmentLength[i] + 1
}))
# Process one column at a time.
tpm <- do.call(cbind, lapply(1:ncol(counts), function(i) {
rate = log(counts[,i]) - log(effLen[,i])
denom = log(sum(exp(rate)))
exp(rate - denom + log(1e6))
}))
# Copy the row and column names from the original matrix.
colnames(tpm) <- colnames(counts)
rownames(tpm) <- rownames(counts)
return(tpm)
}
tpmFinalFiltre <- counts_to_tpm_sansFiltre(myDataFinal,FeatureLength,meanFragmentLength)
36/7
FeatureLength
View(tpmFinalFiltre)
install.packages(countToFPKM)
install.packages("countToFPKM")
install.packages("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
install.packages("RcppArmadillo")
View(effLen)
colSums(tpmFinal)
meanFragmentLength
rm(tpmFinalFiltre)
effLengthBis <- effLengthBis
effLengthBis <- effLength
effLengthBis <- effLen
effLengthBis[effLengthBis <0]  <- 1
View(effLengthBis)
View(tpmFinal)
View(tpmFinal)
head(colnames(tpmFinal))
head(rownames(tpmFinal))
tpmFinal["gene:VIT_13s0047g00700",]
tpmFinal["gene:VIT_13s0047g00810",]
load("~/Documents/KPH/ShinyApp/data/inputApp6.RData")
tail(rownames(tNormCountFinal2App))
tail(colnames(tNormCountFinal2App))
tNormCountFinal2App[,tail(colnames(tNormCountFinal2App))]
colData
?rbind
TPMtest <- tpmFinalV2[,1:15]
TPMtest
rbdin(t(TPMtest), colData)
(t(TPMtest), colData)
rbind(t(TPMtest), colData)
tTPMtest <- t(TPMtest)
ncol(tTPMtest)
ncolTPMtest
ncol(TPMtest)
TPMtest <- tpmFinalV2[,1:15]
View(TPMtest)
TPMtest <- tpmFinalV2[1:15,]
View(TPMtest)
tTPMtest <- t(TPMtest)
View(tTPMtest)
rbind(TPMtest), colData)
rbind(tTPMtest, colData)
ncol(tTPMtest)
ncol(colData)
rbind(TPMtest, colData)
View(tTPMtest)
cbind(tTPMtest, colData)
rm(TPMtest)
rm(tTPMtest)
tTPMtest <- t(tpmFinalV2)
cbind(tTPMtest, colData)
TPMtoAPP <-tcbind(tTPMtest, colData)
TPMtoAPP <-cbind(tTPMtest, colData)
TPMtoAPPFinal <- t(TPMtoAPP)
tail(rownames(TPMtoAPPFinal))
TPMtoAPPFinal[,tail(colnames(TPMtoAPPFinal))]
rownames(TPMtoAPPFinal)
colnames(TPMtoAPPFinal)
colnames(tpmFinalV2)
colnames(tNormCountFinal2App)
colnames(tpmFinalV2)
tail(colnames(tNormCountFinal2App))
tail(rownames(TPMtoAPPFinal))
TPMtoAPPFinal[tail(rownames(TPMtoAPPFinal)),]
Verif <- TPMtoAPPFinal[tail(rownames(TPMtoAPPFinal)),]
View(Verif)
tail(colnames(TPMtoAPPFinal))
tail(colnames(tNormCountFinal2App))
tail(colnames(TPMtoAPP))
rm(TPMtoAPPFinal)
rm(verif)
rm(Verif)
rm(tTPMtest)
save.image("~/Documents/KPH/ShinyApp/data/inputApp6bis.RData")
tail(colnames(TPMtoAPP))
TPMtoAPP[,"RepBio"]
s <-
"F V1  V2  P
0 0.5 0.7  0
0 1.5 1.7  1
1 0.7 0.9  0
1 1.7 1.9  1
"
s
d <- read.delim(textConnection(s), sep="")
d
dsave <- d
gather(-P, -F, key = "V", vlaue = "value")
library(dplyr)
gather(-P, -F, key = "V", vlaue = "value")
library(tidyverse)
gather(-P, -F, key = "V", value = "value")
gather(-P, -f, key = "V", value = "value")
d
d %>% gather(-P, -F, key = "V", value = "value")
levels(as.factor(colData$RepBio))
rownames(TPM)
rownames(TPMtoAPP)
install.packages("esquisse")
install.packages("esquisse")
questionr:::irec()
esquisse:::esquisser()
esquisse:::esquisser()
styler:::set_style_transformers()
styler:::style_selection()
rm(s)
nrow(tpmFinal)
TPMtestV1 <- t(tpmFinal)
rm(TPMtestV1)
tTPMtestV1 <- t(tpmFinal)
TPMV1toAPP <-cbind(tTPMtest, colData)
TPMV1toAPP <-cbind(tTPMtestV1, colData)
tail(rownames(TPMtoAPP))
tail(rownames(TPMV1toAPP))
tail(colnames(TPMV1toAPP))
tail(colnames(TPMtoAPP))
verif <- TPMV1toAPP[,tail(colnames(TPMV1toAPP))]
verif
rm(tTPMtestV1)
rm(d)
View(dsave)
rm(dsave)
save.image("~/Documents/KPH/ShinyApp/data/inputApp6ter.RData")
nrow(tpmFinalV2)
###### JUST ADD ######
setwd("/home/maillard/Documents/KPH/tmp/pourMatti/data")
library(topGO)
mySub <- "AT5G35390;AT2G21920;AT2G34390;AT2G45135;AT5G54070;AT1G56850;AT5G60680;AT2G44690;AT5G19040;AT5G15920;AT3G47980;AT5G06560;AT2G35070;AT3G09620;AT3G06530;AT1G18080
###############################"
mySub <- strsplit(mySub,";")
mySub <- "AT5G35390;AT2G21920;AT2G34390;AT2G45135;AT5G54070;AT1G56850;AT5G60680;AT2G44690;AT5G19040;AT5G15920;AT3G47980;AT5G06560;AT2G35070;AT3G09620;AT3G06530;AT1G18080"
mySub2 <- strsplit(mySub,";")
mySub2[[1]]
class(mySub2[[1]])
monVecteur <- mySub2[[1]]
geneID2GO <- readMappings(file = "./GOuniverseAT.txt")
geneUniverse <- names(geneID2GO)
rm(monVecteur)
interestingGenes <- mySub2[[1]]
geneList <-  factor(as.integer(geneUniverse %in% interestingGenes))
geneList
names(geneList) <- geneUniverse
geneList
myGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata <- new("topGOdata", ontology = "P", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata <- new("topGOdata", ontology = "P", allGenes = mySub,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata <- new("topGOdata", ontology = "P", allGenes = geneList,  annot = annFUN.ene2GO, gene2GO = geneID2GO)
myGOdata <- new("topGOdata", ontology = "P", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneI2GO)
myGOdata <- new("topata", ontology = "P", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
is.character("BP")
is.character(geneList)
str(geneList*)
str(geneList)
subOnto <- NULL
myGOdata <- new("topGOdata", ontology = subOnto, allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
geneList <- NULL
myGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
geneList <-  factor(as.integer(geneUniverse %in% interestingGenes))
myGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata <- new("topGOdata", ontology = "MF", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultClassic <- runTest(myGOdata, algorithm = "classic", statistic = "fisher")
mySub <- "AT1G21910;AT5G56030;AT5G56010;AT5G62390;AT3G08970;AT3G24520;AT2G41690;AT1G67970;AT5G47550;AT2G38470;AT5G07350;AT2G26150;AT5G43840;AT4G19630;AT5G45710;AT5G07100;AT3G63350;AT5G62020;AT5G12140;AT2G38340;AT4G25380;AT4G18880;AT3G51910;AT1G32330;AT5G52640;AT5G61780;AT5G27660;AT5G03720;AT1G43160;AT1G77570"
mySub2 <- strsplit(mySub,";")
interestingGenes <- mySub2[[1]]
geneID2GO <- readMappings(file = "./GOuniverseAT.txt")
geneUniverse <- names(geneID2GO)
geneList <-  factor(as.integer(geneUniverse %in% interestingGenes))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
resultElim <- runTest(myGOdata, algorithm = "elim", statistic = "fisher")
resultElim
resultTopgo <- runTest(myGOdata, algorithm = "weight01", statistic = "fisher")
allRes <- GenTable(myGOdata, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo,
orderBy = "elimFisher", ranksOf = "classicFisher", topNodes = 30)
resultElim[[]]
resultElim[[1]]
summary(resultElim)
str(resultElim)
resultClassic <- runTest(myGOdata, algorithm = "classic", statistic = "fisher")
allRes <- GenTable(myGOdata, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo,
orderBy = "elimFisher", ranksOf = "classicFisher", topNodes = 30)
allRes
